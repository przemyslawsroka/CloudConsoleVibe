# Network Monitor Agent Makefile

.PHONY: build clean test run install deps check-deps tidy help

# Variables
BINARY_NAME=network-monitor-agent
BUILD_DIR=./bin
MAIN_PATH=./cmd/agent
VERSION=1.0.0
LDFLAGS=-ldflags "-X main.version=$(VERSION) -w -s"

# Default target
all: deps tidy test build

# Help target
help:
	@echo "Available targets:"
	@echo "  build      - Build the monitoring agent binary"
	@echo "  clean      - Clean build artifacts"
	@echo "  test       - Run tests"
	@echo "  run        - Run the agent (with default config)"
	@echo "  install    - Install the binary to GOPATH/bin"
	@echo "  deps       - Download dependencies"
	@echo "  tidy       - Clean up go.mod and go.sum"
	@echo "  check-deps - Check if all dependencies are available"
	@echo "  config     - Generate default configuration"
	@echo "  help       - Show this help message"

# Build the binary
build: deps
	@echo "üî® Building $(BINARY_NAME)..."
	@mkdir -p $(BUILD_DIR)
	go build $(LDFLAGS) -o $(BUILD_DIR)/$(BINARY_NAME) $(MAIN_PATH)
	@echo "‚úÖ Build complete: $(BUILD_DIR)/$(BINARY_NAME)"

# Build for multiple platforms
build-all: deps
	@echo "üî® Building for multiple platforms..."
	@mkdir -p $(BUILD_DIR)
	
	# Linux AMD64
	GOOS=linux GOARCH=amd64 go build $(LDFLAGS) -o $(BUILD_DIR)/$(BINARY_NAME)-linux-amd64 $(MAIN_PATH)
	
	# Linux ARM64
	GOOS=linux GOARCH=arm64 go build $(LDFLAGS) -o $(BUILD_DIR)/$(BINARY_NAME)-linux-arm64 $(MAIN_PATH)
	
	# macOS AMD64
	GOOS=darwin GOARCH=amd64 go build $(LDFLAGS) -o $(BUILD_DIR)/$(BINARY_NAME)-darwin-amd64 $(MAIN_PATH)
	
	# macOS ARM64 (Apple Silicon)
	GOOS=darwin GOARCH=arm64 go build $(LDFLAGS) -o $(BUILD_DIR)/$(BINARY_NAME)-darwin-arm64 $(MAIN_PATH)
	
	# Windows AMD64
	GOOS=windows GOARCH=amd64 go build $(LDFLAGS) -o $(BUILD_DIR)/$(BINARY_NAME)-windows-amd64.exe $(MAIN_PATH)
	
	@echo "‚úÖ Multi-platform build complete!"
	@ls -la $(BUILD_DIR)/

# Clean build artifacts
clean:
	@echo "üßπ Cleaning build artifacts..."
	rm -rf $(BUILD_DIR)
	go clean
	@echo "‚úÖ Clean complete"

# Download dependencies
deps:
	@echo "üì¶ Downloading dependencies..."
	go mod download
	@echo "‚úÖ Dependencies downloaded"

# Tidy dependencies
tidy:
	@echo "üßπ Tidying dependencies..."
	go mod tidy
	@echo "‚úÖ Dependencies tidied"

# Check if dependencies are available
check-deps:
	@echo "üîç Checking dependencies..."
	@go mod verify
	@echo "‚úÖ All dependencies verified"

# Run tests
test:
	@echo "üß™ Running tests..."
	go test -v ./...
	@echo "‚úÖ Tests complete"

# Run tests with coverage
test-coverage:
	@echo "üß™ Running tests with coverage..."
	go test -v -coverprofile=coverage.out ./...
	go tool cover -html=coverage.out -o coverage.html
	@echo "‚úÖ Coverage report generated: coverage.html"

# Run the agent with default configuration
run: build
	@echo "üöÄ Running $(BINARY_NAME)..."
	$(BUILD_DIR)/$(BINARY_NAME) run

# Generate default configuration
config: build
	@echo "üìù Generating default configuration..."
	$(BUILD_DIR)/$(BINARY_NAME) generate-config
	@echo "‚úÖ Configuration generated: agent-config.yaml"

# Show status
status: build
	@echo "üìä Showing agent status..."
	$(BUILD_DIR)/$(BINARY_NAME) status

# Install binary to GOPATH/bin
install: build
	@echo "üì¶ Installing $(BINARY_NAME)..."
	go install $(LDFLAGS) $(MAIN_PATH)
	@echo "‚úÖ Installed to $(GOPATH)/bin/$(BINARY_NAME)"

# Development target - build and run with auto-restart
dev:
	@echo "üîÑ Running in development mode..."
	@echo "Press Ctrl+C to stop"
	go run $(MAIN_PATH) run --log-level debug

# Format code
fmt:
	@echo "üé® Formatting code..."
	go fmt ./...
	@echo "‚úÖ Code formatted"

# Lint code
lint:
	@echo "üîç Linting code..."
	@command -v golangci-lint >/dev/null 2>&1 || { echo "Installing golangci-lint..."; go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest; }
	golangci-lint run
	@echo "‚úÖ Linting complete"

# Security check
sec:
	@echo "üîí Running security checks..."
	@command -v gosec >/dev/null 2>&1 || { echo "Installing gosec..."; go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest; }
	gosec ./...
	@echo "‚úÖ Security check complete"

# Full check: fmt, lint, test, build
check: fmt lint test build
	@echo "‚úÖ All checks passed!"

# Docker build
docker-build:
	@echo "üê≥ Building Docker image..."
	docker build -t network-monitor-agent:$(VERSION) .
	@echo "‚úÖ Docker image built: network-monitor-agent:$(VERSION)"

# Create release tarball
release: build-all
	@echo "üì¶ Creating release package..."
	@mkdir -p release
	tar -czf release/$(BINARY_NAME)-$(VERSION)-linux-amd64.tar.gz -C $(BUILD_DIR) $(BINARY_NAME)-linux-amd64
	tar -czf release/$(BINARY_NAME)-$(VERSION)-linux-arm64.tar.gz -C $(BUILD_DIR) $(BINARY_NAME)-linux-arm64
	tar -czf release/$(BINARY_NAME)-$(VERSION)-darwin-amd64.tar.gz -C $(BUILD_DIR) $(BINARY_NAME)-darwin-amd64
	tar -czf release/$(BINARY_NAME)-$(VERSION)-darwin-arm64.tar.gz -C $(BUILD_DIR) $(BINARY_NAME)-darwin-arm64
	zip -j release/$(BINARY_NAME)-$(VERSION)-windows-amd64.zip $(BUILD_DIR)/$(BINARY_NAME)-windows-amd64.exe
	@echo "‚úÖ Release packages created in ./release/" 